"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[40968],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=s(n),d=a,m=h["".concat(c,".").concat(d)]||h[d]||u[d]||i;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[h]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},92531:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={title:"How to Verify Release Candidate",sidebar_position:7},o=void 0,l={unversionedId:"how-to-verify",id:"how-to-verify",title:"How to Verify Release Candidate",description:"Download the release candidate",source:"@site/community/how-to-verify.md",sourceDirName:".",slug:"/how-to-verify",permalink:"/community/how-to-verify",draft:!1,editUrl:"https://github.com/apache/inlong-website/edit/master/community/how-to-verify.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"How to Verify Release Candidate",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"How to Release",permalink:"/community/how-to-release"},next:{title:"How to Report Issues",permalink:"/community/how-to-report-issues"}},c={},s=[{value:"Download the release candidate",id:"download-the-release-candidate",level:2},{value:"verify the version",id:"verify-the-version",level:2},{value:"Check whether the release package is complete",id:"check-whether-the-release-package-is-complete",level:3},{value:"Check the GPG signature",id:"check-the-gpg-signature",level:3},{value:"Check the file content of the source package",id:"check-the-file-content-of-the-source-package",level:3},{value:"Check binary packages",id:"check-binary-packages",level:3},{value:"Reply the email",id:"reply-the-email",level:2}],p={toc:s};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"download-the-release-candidate"},"Download the release candidate"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"release_version")," is the upcoming version number, such as 1.4.0; ",(0,a.kt)("inlineCode",{parentName:"p"},"rc_version")," is the Release Candidate, such as RC0, RC1...; KEY_ID is the GPG Key ID you created."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"svn co https://dist.apache.org/repos/dist/dev/inlong/${release_version}-${rc_version}/\n")),(0,a.kt)("h2",{id:"verify-the-version"},"verify the version"),(0,a.kt)("h3",{id:"check-whether-the-release-package-is-complete"},"Check whether the release package is complete"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Whether to include the source package"),(0,a.kt)("li",{parentName:"ul"},"Whether to include the signature and sha512 of the source package"),(0,a.kt)("li",{parentName:"ul"},"If a binary package is uploaded, the signature and sha512 are also checked")),(0,a.kt)("h3",{id:"check-the-gpg-signature"},"Check the GPG signature"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Import public key")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Download KEYS\ncurl https://downloads.apache.org/inlong/KEYS > KEYS\n# Import KEYS to local\ngpg --import KEYS\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"trust the public key\nReplace ",(0,a.kt)("inlineCode",{parentName:"li"},"THE_KEY_USED")," with the KEY used for this version.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# After execution, enter trust -> 5(I trust ultimately) -> Y(Yes) -> quit\ngpg --edit-key THE_KEY_USED\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Check the signature using the following command")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cd ${release_version}-${rc_version}\nfor i in *.tar.gz; do echo $i; gpg --verify $i.asc $i; done\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If the keyword ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Good signature"))," appears, the signature is correct.")),(0,a.kt)("h3",{id:"check-the-file-content-of-the-source-package"},"Check the file content of the source package"),(0,a.kt)("p",null,"Unzip ",(0,a.kt)("inlineCode",{parentName:"p"},"apache-inlong-${release_version}-src.tar.gz")," and check the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Whether the LICENSE and NOTICE file exists and whether the content is correct"),(0,a.kt)("li",{parentName:"ul"},"Whether all files have an ASF License header"),(0,a.kt)("li",{parentName:"ul"},"Whether the source code can be compiled normally"),(0,a.kt)("li",{parentName:"ul"},"Whether the single test can run through")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"You can check the compilation and unit test through ",(0,a.kt)("inlineCode",{parentName:"p"},"mvn clean package install"),". If the compilation fails, clean up the local warehouse first.")),(0,a.kt)("h3",{id:"check-binary-packages"},"Check binary packages"),(0,a.kt)("p",null,"Unzip ",(0,a.kt)("inlineCode",{parentName:"p"},"apache-inlong-${release_version}-bin.tar.gz")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"apache-inlong-${release_version}-sort-connectors.tar.gz")," and check the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Whether the LICENSE and NOTICE file exists and whether the content is correct"),(0,a.kt)("li",{parentName:"ul"},"Whether the normal deployment is successful"),(0,a.kt)("li",{parentName:"ul"},"Deploy the test environment and verify whether the production and consumption can run normally"),(0,a.kt)("li",{parentName:"ul"},"Verify what you think might be going wrong")),(0,a.kt)("h2",{id:"reply-the-email"},"Reply the email"),(0,a.kt)("p",null,"If the verification is passed, you can refer to the following template for email replies."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"+1 from me, and I checked the following items:\n- [X] Download links are valid.\n- [X] Checksums and PGP signatures are valid.\n- [X] Source code artifacts have correct names matching the current release.\n- [X] LICENSE and NOTICE files are correct for the repository.\n- [X] All files have license headers if necessary.\n- [X] No compiled archives bundled in the source archive.\n- [X] Building is OK.\n")))}h.isMDXComponent=!0}}]);