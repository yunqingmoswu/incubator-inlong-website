"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[7553],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(r),f=o,m=c["".concat(s,".").concat(f)]||c[f]||p[f]||a;return r?n.createElement(m,i(i({ref:t},d),{},{components:r})):n.createElement(m,i({ref:t},d))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},63336:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],l={title:"Overview",sidebar_position:1},s="Overview",u={unversionedId:"modules/sort/overview",id:"modules/sort/overview",title:"Overview",description:"InLong-Sort is used to extract data from different source systems, then transforms the data and finally loads the data into diffrent storage systems.",source:"@site/docs/modules/sort/overview.md",sourceDirName:"modules/sort",slug:"/modules/sort/overview",permalink:"/docs/next/modules/sort/overview",draft:!1,editUrl:"https://github.com/apache/incubator-inlong-website/edit/master/docs/modules/sort/overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Overview",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"TubeMQ VS Kafka",permalink:"/docs/next/modules/tubemq/tubemq_perf_test_vs_Kafka"},next:{title:"Deployment",permalink:"/docs/next/modules/sort/quick_start"}},d={},p=[{value:"Supported Extract Node",id:"supported-extract-node",level:2},{value:"Supported Transform",id:"supported-transform",level:2},{value:"Supported Load Node",id:"supported-load-node",level:2},{value:"Future Plans",id:"future-plans",level:2},{value:"More kinds of Extract Node",id:"more-kinds-of-extract-node",level:3},{value:"More kinds of Transform",id:"more-kinds-of-transform",level:3},{value:"More kinds of Load Node",id:"more-kinds-of-load-node",level:3}],c={toc:p};function f(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"overview"},"Overview"),(0,a.kt)("p",null,"InLong-Sort is used to extract data from different source systems, then transforms the data and finally loads the data into diffrent storage systems.\nInLong-Sort is simply a Flink Application, and relys on InLong-Manager to manage meta data(such as the source informations and storage informations)."),(0,a.kt)("h1",{id:"features"},"Features"),(0,a.kt)("h2",{id:"supported-extract-node"},"Supported Extract Node"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pulsar"),(0,a.kt)("li",{parentName:"ul"},"MySQL"),(0,a.kt)("li",{parentName:"ul"},"Kafka"),(0,a.kt)("li",{parentName:"ul"},"MongoDB"),(0,a.kt)("li",{parentName:"ul"},"PostgreSQL"),(0,a.kt)("li",{parentName:"ul"},"HDFS")),(0,a.kt)("h2",{id:"supported-transform"},"Supported Transform"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"String Split"),(0,a.kt)("li",{parentName:"ul"},"String Regular Replace"),(0,a.kt)("li",{parentName:"ul"},"String Regular Replace First Matched Value"),(0,a.kt)("li",{parentName:"ul"},"Data Filter"),(0,a.kt)("li",{parentName:"ul"},"Data Distinct"),(0,a.kt)("li",{parentName:"ul"},"Regular Join")),(0,a.kt)("h2",{id:"supported-load-node"},"Supported Load Node"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Hive"),(0,a.kt)("li",{parentName:"ul"},"Kafka"),(0,a.kt)("li",{parentName:"ul"},"HBase"),(0,a.kt)("li",{parentName:"ul"},"ClickHouse"),(0,a.kt)("li",{parentName:"ul"},"Iceberg"),(0,a.kt)("li",{parentName:"ul"},"PostgreSQL"),(0,a.kt)("li",{parentName:"ul"},"HDFS"),(0,a.kt)("li",{parentName:"ul"},"TDSQL Postgres")),(0,a.kt)("h2",{id:"future-plans"},"Future Plans"),(0,a.kt)("h3",{id:"more-kinds-of-extract-node"},"More kinds of Extract Node"),(0,a.kt)("p",null,"Oracle, SqlServer, and etc."),(0,a.kt)("h3",{id:"more-kinds-of-transform"},"More kinds of Transform"),(0,a.kt)("p",null,"Time window aggregation, Content extraction, Type conversion, Time format conversion, and etc."),(0,a.kt)("h3",{id:"more-kinds-of-load-node"},"More kinds of Load Node"),(0,a.kt)("p",null,"Elasticsearch, and etc."))}f.isMDXComponent=!0}}]);